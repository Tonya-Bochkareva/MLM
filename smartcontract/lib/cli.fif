// show-usage()
// ( -- )
//
// Prints contents of globally defined usage() and halts with exit code 1.

{ ."Usage: " @' $0 type ." " @' usage() cr 1 halt } : show-usage()

// scan-args()
// (e -- argcount)
//
// Executes block e for each of the command-line arguments.
// On each run, e receives (i counter argument processed?), where i is the original index of the argument,
// counter is index amoung non-option arguments (like "-F") and their parameters, starting from 0,
// argument is the actual string value of the argument, and processed? is always 0.
// Block e is expected to leave those values on stack (potentially updating them).
// Returns the final value of the counter.

{
  1 0 { over $# <= } {
    over $() 0
    4 pick execute
    drop drop
    swap 1+ swap
  } while
  nip nip
} : scan-args()

// option-long()
// (i counter argument processed short-name long-name param-count handler -- i' counter argument processed')
//
// Option is a predefined command-line argument that consumes some number of following arguments
// and passes them to the handler. Handler is expected to remove all those values from the stack.
// This word is for options with two forms: short (like "-O <filename>") and long (like "--output <filename>").
// Shows usage if there's not enough arguments in the command line left.

{
  rot 5 pick $= 3 roll 5 pick $= or {
    swap dup 6 roll
    // counter argument processed handler param-count param-count' i
    { over 0> } { // Move option's params to the stack
      1+ dup $# <= {
        show-usage()
      } ifnot
      dup $()
      4 -roll // -> ...<new param> handler param-count param-count' i
      swap 1- swap
    } while
    nip swap 4 + -roll
    // i counter argument processed <param>x<param-count> handler
    execute
    1+
  } {
    drop drop
  } cond
} : option-long()


// nth-argument()
// (i counter argument processed n handler -- i' counter argument processed')
//
// Handles n-th command line argument (1-indexed, not including options/switches and their params).
// Invokes handler with the argument value. Handler is expected to remove that value from stack.

{
  2 pick {
    2drop
  } {
    swap 4 pick 1+ = {
      2 pick swap execute
      rot 1+ -rot
      1+
    } {
      drop
    } cond
  } cond
} : nth-argument()
