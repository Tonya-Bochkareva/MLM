#!/usr/bin/env -S fift -s
"TonUtil.fif" include
"lib/cli.fif" include

"output/scm.bin"   =: OUTPUT_BOC
"output/output.pk" =: OUTPUT_PK
"output/addr.bin"  =: OUTPUT_ADDR
Masterchain        =: WC

{
  ."[OPTIONS] <file.fif> <scm_addr>" cr
  ."Creates MLM smarcontract" cr cr

  ."  <file.fif>              smarcontract source code in fift" cr
  ."  <scm_addr>              target smarcontract for transfering grams" cr
  ."                            example: 0f_YwajCy_2U753Ll8Z1b-ixE3JEX42zQ1e5uFu_ZbSIvRS0" cr cr

  ."OPTIONS:" cr
  ."  -o,--output boc         output boc file" cr
  ."                            default: " OUTPUT_BOC type cr
  ."  -k,--key output.pk      private key file" cr
  ."                            default: " OUTPUT_PK type cr
  ."  -a,--address addr.bin   file for storing scm address in binary format" cr
  ."                            default: " OUTPUT_ADDR type cr
  ."  -w,--wc number          worchain id" cr
  ."                            default: " WC .
} : usage()

{
  "-a" "--address" 1 { =: OUTPUT_ADDR } option-long()
  "-k" "--key" 1 { =: OUTPUT_PK } option-long()
  "-o" "--output" 1 { =: OUTPUT_BOC } option-long()
  "-w" "--wc" 1 { =: WC } option-long()
  1 { include =: SOURCE_CODE } nth-argument()
  2 { =: TARGET } nth-argument()
} scan-args()

2 < {
  show-usage()
} if

<b
  0 32 u, // seqno
  OUTPUT_PK load-generate-keypair constant wallet_pk dup constant public_key
  B, // public key
  b{001} s, TARGET $>smca 2drop addr,
  <b b{0} s, b> ref,
  <b null dict, b> ref,
b>

<b
  // split_depth:(Maybe (## 5)) special:(Maybe TickTock)
  b{00} s,                // nothing$0
  // code:(Maybe ^Cell)
  b{1} s,                 // just$1
    SOURCE_CODE ref,      // ^Cell
  b{1} s,                 // data:(Maybe ^Cell)
    swap ref,
  b{0} s,                 // library:(HashmapE 256 SimpleLib)
b>

dup hash WC swap 2constant addr
addr OUTPUT_ADDR save-address

<b 0 32 u, 0 4 u, b>
dup hash wallet_pk ed25519_sign_uint
rot

<b
  // info:CommonMsgInfo
  b{10} s,               // ext_in_msg_info$10
    // src:MsgAddressExt
    b{00} s,             // addr_none$00
    // dest:MsgAddressInt
    b{10} s,             // addr_std$10
      b{0} s,            // anycast:(Maybe Anycast)
      addr addr,         // workchain_id:int8 address:bits256
    // import_fee:Grams
    0 Gram,              // (VarUInteger 16) // b{0000} s,
  // init:(Maybe (Either StateInit ^StateInit))
  b{1} s,                // just$1
    b{1} s,              // right$1
      swap ref,          // ^StateInit
  // body:(Either X ^X)
  b{0} s,                // left$0 0
    swap B, swap <s s,
b>
dup <s ."INIT Message:" cr csr.
cr
."Smart contract addr: " addr .addr cr
."Smart contract non-bounceable: " addr 7 .Addr cr
."Smart contract bounceable: " addr 6 .Addr cr

2 boc+>B OUTPUT_BOC tuck B>file
."Boc is generated: " OUTPUT_BOC type cr
